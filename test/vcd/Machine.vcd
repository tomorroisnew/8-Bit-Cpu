$date
	Sun Dec 10 20:40:19 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Machine_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module computer $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # writeEnable $end
$var wire 8 $ WriteDataBus [7:0] $end
$var wire 8 % ReadDataBus [7:0] $end
$var wire 8 & AddressBus [7:0] $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 ' zero_flag $end
$var wire 4 ( opCode [3:0] $end
$var wire 8 ) WriteDataBus [7:0] $end
$var wire 1 * Reg_const4 $end
$var wire 1 + Reg_Imm $end
$var wire 2 , Reg_4_PC [1:0] $end
$var wire 1 - RegWrite_Enable $end
$var wire 8 . ReadDataBus [7:0] $end
$var wire 1 / RA_Enable $end
$var wire 2 0 PC_RA_ALU_REG [1:0] $end
$var wire 1 1 PC_Enable $end
$var wire 1 # MemwriteEnable $end
$var wire 2 2 Alu_Move_Mem [1:0] $end
$var wire 8 3 AddressBus [7:0] $end
$var wire 3 4 ALUOP [2:0] $end
$var reg 1 5 MemWrite_Enable $end
$scope module ctrl $end
$var wire 1 ' zero_flag $end
$var wire 4 6 opCode [3:0] $end
$var reg 3 7 ALUOP [2:0] $end
$var reg 2 8 Alu_Move_Mem [1:0] $end
$var reg 1 # MemWrite_Enable $end
$var reg 1 1 PC_Enable $end
$var reg 2 9 PC_RA_ALU_REG [1:0] $end
$var reg 1 / RA_Enable $end
$var reg 1 - RegWrite_Enable $end
$var reg 2 : Reg_4_PC [1:0] $end
$var reg 1 + Reg_Imm $end
$var reg 1 * Reg_const4 $end
$upscope $end
$scope module dp $end
$var wire 3 ; ALUOP [2:0] $end
$var wire 8 < Address [7:0] $end
$var wire 2 = Alu_Move_Mem [1:0] $end
$var wire 1 5 MemWrite_Enable $end
$var wire 8 > Memout [7:0] $end
$var wire 1 1 PC_Enable $end
$var wire 2 ? PC_RA_ALU_REG [1:0] $end
$var wire 1 / RA_Enable $end
$var wire 1 - RegWrite_Enable $end
$var wire 2 @ Reg_4_PC [1:0] $end
$var wire 1 + Reg_Imm $end
$var wire 1 * Reg_const4 $end
$var wire 8 A WriteData [7:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 ' zero_flag $end
$var wire 2 B toRd2 [1:0] $end
$var wire 8 C result [7:0] $end
$var wire 8 D pc_plus_one [7:0] $end
$var wire 4 E opCode [3:0] $end
$var wire 8 F instruction [7:0] $end
$var wire 4 G imm [3:0] $end
$var wire 8 H ReadData [7:0] $end
$var wire 8 I RAval [7:0] $end
$var wire 8 J PCval [7:0] $end
$var wire 8 K D2 [7:0] $end
$var wire 8 L D1 [7:0] $end
$var reg 8 M IN1 [7:0] $end
$var reg 8 N IN2 [7:0] $end
$var reg 8 O toPC [7:0] $end
$var reg 2 P toRd1 [1:0] $end
$var reg 8 Q toWriteData [7:0] $end
$scope module Inst $end
$var wire 8 R Address [7:0] $end
$var reg 8 S Instruction [7:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 T i [31:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 8 U In [7:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 1 writeEnable $end
$var reg 8 V Data [7:0] $end
$var reg 8 W Out [7:0] $end
$upscope $end
$scope module RA $end
$var wire 8 X In [7:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 / writeEnable $end
$var reg 8 Y Data [7:0] $end
$var reg 8 Z Out [7:0] $end
$upscope $end
$scope module RegFile $end
$var wire 1 - RegWrite_Enable $end
$var wire 2 [ RegisterData1 [1:0] $end
$var wire 2 \ RegisterData2 [1:0] $end
$var wire 8 ] WriteData [7:0] $end
$var wire 2 ^ WriteRegister [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 8 _ Data1 [7:0] $end
$var reg 8 ` Data2 [7:0] $end
$var integer 32 a i [31:0] $end
$upscope $end
$scope module alu $end
$var wire 8 b input1 [7:0] $end
$var wire 8 c input2 [7:0] $end
$var wire 3 d op [2:0] $end
$var reg 8 e result [7:0] $end
$var reg 1 ' zero $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 8 f Address [7:0] $end
$var wire 8 g WriteData [7:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # writeEnable $end
$var wire 1 h DataMemoryWriteEnable $end
$var wire 1 i DataMemoryReadEnable $end
$var wire 8 j Data [7:0] $end
$scope module controller $end
$var wire 8 k Address [7:0] $end
$var wire 1 # writeEnable $end
$var reg 1 i memReadEnable $end
$var reg 1 h memWriteEnable $end
$upscope $end
$scope module ram $end
$var wire 8 l Address [7:0] $end
$var wire 8 m WriteData [7:0] $end
$var wire 1 ! clk $end
$var wire 1 i readEnable $end
$var wire 1 " reset $end
$var wire 1 h writeEnable $end
$var reg 8 n Data [7:0] $end
$var integer 32 o i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx o
bx n
bx m
bx l
bx k
bx j
1i
0h
bx g
bx f
b0 e
b0 d
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
b100000000 T
bx S
bx R
b0 Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
b0 C
bx B
bx A
b0 @
b0 ?
bx >
b0 =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
bx 6
x5
b0 4
bx 3
b0 2
11
b0 0
0/
bx .
0-
b0 ,
0+
0*
bx )
bx (
1'
bx &
bx %
bx $
0#
x"
x!
$end
#15
0"
0!
#30
b0 >
b0 %
b0 .
b0 H
b0 j
b0 n
b0 M
b0 b
b100 N
b100 c
b10 4
b10 7
b10 ;
b10 d
b1 ,
b1 :
b1 @
1*
1-
1+
b0 G
b0 &
b0 3
b0 <
b0 f
b0 k
b0 l
b0 K
b0 `
b0 $
b0 )
b0 A
b0 g
b0 m
b0 L
b0 _
b1 (
b1 6
b1 E
b0 B
b0 \
b11 P
b11 [
b11 ^
b10000 F
b10000 S
b1 O
b1 U
b1 D
b1 X
b0 J
b0 R
b0 W
b0 I
b0 Z
b0 V
b0 Y
b100 a
b100000000 o
1"
1!
#45
0"
0!
#60
b1 Q
b1 ]
0'
b1 C
b1 e
b1 M
b1 b
b0 N
b0 c
b0 ,
b0 :
b0 @
b101 4
b101 7
b101 ;
b101 d
b1 G
b10 (
b10 6
b10 E
b1 B
b1 \
b10 O
b10 U
b100001 F
b100001 S
b10 D
b10 X
b1 J
b1 R
b1 W
b1 V
1!
#75
0!
#90
b0 P
b0 [
b0 ^
1'
b0 C
b0 e
0*
0+
b0 4
b0 7
b0 ;
b0 d
b1 2
b1 8
b1 =
b11 G
b1 &
b1 3
b1 <
b1 f
b1 k
b1 l
b1 K
b1 `
b101 (
b101 6
b101 E
b11 B
b11 \
b11 O
b11 U
b1010011 F
b1010011 S
b0 N
b0 c
b11 D
b11 X
b10 J
b10 R
b10 W
b0 $
b0 )
b0 A
b0 g
b0 m
b0 L
b0 _
b10 V
1!
#105
0!
#120
b0 Q
b0 ]
b11 P
b11 [
b11 ^
b0 M
b0 b
b0 2
b0 8
b0 =
b10 4
b10 7
b10 ;
b10 d
b1 ,
b1 :
b1 @
1*
1+
b0 G
b1 (
b1 6
b1 E
b0 B
b0 \
b100 O
b100 U
b100 N
b100 c
b10000 F
b10000 S
b1 $
b1 )
b1 A
b1 g
b1 m
b1 L
b1 _
b100 D
b100 X
b11 J
b11 R
b11 W
b11 V
1!
#135
0!
#150
b1110 Q
b1110 ]
0'
b1110 C
b1110 e
b1110 M
b1110 b
b0 N
b0 c
b0 ,
b0 :
b0 @
b101 4
b101 7
b101 ;
b101 d
b1110 G
b0 &
b0 3
b0 <
b0 f
b0 k
b0 l
b0 K
b0 `
b10 (
b10 6
b10 E
b10 B
b10 \
b101 O
b101 U
b101110 F
b101110 S
b101 D
b101 X
b100 J
b100 R
b100 W
b0 $
b0 )
b0 A
b0 g
b0 m
b0 L
b0 _
b100 V
1!
#165
0!
#180
b0 Q
b0 ]
b0 P
b0 [
b0 ^
1'
b0 C
b0 e
0*
0-
0+
b0 4
b0 7
b0 ;
b0 d
1/
b11 0
b11 9
b11 ?
b11 G
b1110 &
b1110 3
b1110 <
b1110 f
b1110 k
b1110 l
b1110 K
b1110 `
b1011 (
b1011 6
b1011 E
b11 B
b11 \
b1110 O
b1110 U
b1 N
b1 c
b10110011 F
b10110011 S
b1 $
b1 )
b1 A
b1 g
b1 m
b1 L
b1 _
b110 D
b110 X
b101 J
b101 R
b101 W
b101 V
1!
#195
0!
#210
b1111 Q
b1111 ]
0'
b1111 C
b1111 e
b1111 O
b1111 U
b101 M
b101 b
b1110 N
b1110 c
0/
b0 0
b0 9
b0 ?
b101 4
b101 7
b101 ;
b101 d
1*
1-
1+
b101 G
b0 &
b0 3
b0 <
b0 f
b0 k
b0 l
b0 K
b0 `
b1110 $
b1110 )
b1110 A
b1110 g
b1110 m
b1110 L
b1110 _
b10 (
b10 6
b10 E
b1 B
b1 \
b11 P
b11 [
b11 ^
b100101 F
b100101 S
b1111 D
b1111 X
b1110 J
b1110 R
b1110 W
b110 I
b110 Z
b1110 V
b110 Y
1!
#225
0!
#240
b1 P
b1 [
b1 ^
1'
b0 C
b0 e
b1111 M
b1111 b
0*
0+
b0 4
b0 7
b0 ;
b0 d
b1 2
b1 8
b1 =
b111 G
b1111 &
b1111 3
b1111 <
b1111 f
b1111 k
b1111 l
b1111 K
b1111 `
b101 (
b101 6
b101 E
b11 B
b11 \
b10000 O
b10000 U
b0 N
b0 c
b1010111 F
b1010111 S
b0 $
b0 )
b0 A
b0 g
b0 m
b0 L
b0 _
b10000 D
b10000 X
b1111 J
b1111 R
b1111 W
b1111 V
1!
#255
0!
#270
b0 Q
b0 ]
b1 M
b1 b
0-
b0 2
b0 8
b0 =
b1 0
b1 9
b1 ?
b0 G
b1 &
b1 3
b1 <
b1 f
b1 k
b1 l
b1 K
b1 `
b1101 (
b1101 6
b1101 E
b0 B
b0 \
b0 P
b0 [
b0 ^
b110 O
b110 U
b11010000 F
b11010000 S
b1 N
b1 c
b10001 D
b10001 X
b10000 J
b10000 R
b10000 W
b1 $
b1 )
b1 A
b1 g
b1 m
b1 L
b1 _
b10000 V
1!
#285
0!
#300
b10000 Q
b10000 ]
0'
b10000 C
b10000 e
b111 O
b111 U
b1111 M
b1111 b
b0 0
b0 9
b0 ?
b1 4
b1 7
b1 ;
b1 d
1-
b1 G
b1111 &
b1111 3
b1111 <
b1111 f
b1111 k
b1111 l
b1111 K
b1111 `
b110 (
b110 6
b110 E
b1 B
b1 \
b1100001 F
b1100001 S
b111 D
b111 X
b110 J
b110 R
b110 W
b110 V
1!
#315
0!
#330
1'
b11 P
b11 [
b11 ^
b0 M
b0 b
b10 4
b10 7
b10 ;
b10 d
b1 ,
b1 :
b1 @
1*
1+
b0 G
b10000 &
b10000 3
b10000 <
b10000 f
b10000 k
b10000 l
b10000 K
b10000 `
b0 Q
b0 ]
b1 (
b1 6
b1 E
b0 B
b0 \
b0 C
b0 e
b1000 O
b1000 U
b10000 F
b10000 S
b100 N
b100 c
b1000 D
b1000 X
b111 J
b111 R
b111 W
b1111 $
b1111 )
b1111 A
b1111 g
b1111 m
b1111 L
b1111 _
b111 V
1!
#345
0!
#360
b0 Q
b0 ]
b0 N
b0 c
1'
b0 C
b0 e
b0 ,
b0 :
b0 @
b101 4
b101 7
b101 ;
b101 d
b10 (
b10 6
b10 E
b1001 O
b1001 U
b100000 F
b100000 S
b0 $
b0 )
b0 A
b0 g
b0 m
b0 L
b0 _
b1001 D
b1001 X
b1000 J
b1000 R
b1000 W
b1000 V
1!
#375
0!
#390
b10000 N
b10000 c
b10000 $
b10000 )
b10000 A
b10000 g
b10000 m
b10000 L
b10000 _
b0 P
b0 [
b0 ^
1h
0*
0-
0+
b0 4
b0 7
b0 ;
b0 d
1#
b11 G
b0 &
b0 3
b0 <
b0 f
b0 k
b0 l
b0 K
b0 `
b100 (
b100 6
b100 E
b11 B
b11 \
b1010 O
b1010 U
b1000011 F
b1000011 S
b1010 D
b1010 X
b1001 J
b1001 R
b1001 W
b1001 V
1!
#405
0!
#420
b10000 M
b10000 b
0h
01
0#
b0 G
b10000 &
b10000 3
b10000 <
b10000 f
b10000 k
b10000 l
b10000 K
b10000 `
b0 (
b0 6
b0 E
b0 B
b0 \
b1011 O
b1011 U
b0 F
b0 S
b0 >
b0 %
b0 .
b0 H
b0 j
b0 n
b1011 D
b1011 X
b1010 J
b1010 R
b1010 W
b1010 V
1!
#435
0!
#450
1!
#465
0!
#480
1!
#495
0!
#510
1!
#525
0!
#540
1!
#555
0!
#570
1!
#585
0!
#600
1!
#615
0!
#630
1!
#645
0!
#660
1!
#675
0!
#690
1!
#705
0!
#720
1!
#735
0!
#750
1!
#765
0!
